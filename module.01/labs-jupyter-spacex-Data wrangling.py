# Auto-generated from labs-jupyter-spacex-Data wrangling.ipynb
# Conversion: code cells only. Markdown omitted.

# %% [code] - Cell 1
# (Notebook install commands removed for script execution)

# %% [code] - Cell 2
# Pandas is a software library written for the Python programming language for data manipulation and analysis.
import pandas as pd
#NumPy is a library for the Python programming language, adding support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays
import numpy as np
import os
import io
import requests

# %% [code] - Cell 3
def load_dataset():
    remote_url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_1.csv"
    local_fallback = os.path.join('module.01', 'spacex_launches_clean.csv')
    source = None
    # Try remote first with headers and timeout
    try:
        s = requests.Session()
        s.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115 Safari/537.36'
        })
        r = s.get(remote_url, timeout=30)
        r.raise_for_status()
        df_remote = pd.read_csv(io.StringIO(r.text))
        source = remote_url
        return df_remote, source
    except Exception:
        pass
    # Fallback to local cleaned dataset
    if os.path.exists(local_fallback):
        df_local = pd.read_csv(local_fallback)
        source = local_fallback
        return df_local, source
    raise RuntimeError("Unable to load dataset from remote or local fallback.")

df, dataset_source = load_dataset()
df.head(10)

# %% [code] - Cell 4
df.isnull().sum()/len(df)*100

# %% [code] - Cell 5
df.dtypes

# %% [code] - Cell 6
# Apply value_counts() on column LaunchSite
launches_per_site = df['LaunchSite'].value_counts()

# %% [code] - Cell 7
# Apply value_counts on Orbit column
orbits_counts = df['Orbit'].value_counts()

# %% [code] - Cell 8
# landing_outcomes = values on Outcome column
landing_outcomes = df['Outcome'].value_counts()

# %% [code] - Cell 9
for i,outcome in enumerate(landing_outcomes.keys()):
    print(i,outcome)

# %% [code] - Cell 10
# Define unsuccessful outcomes (robust to ordering): any not starting with 'True'
bad_outcomes = set(o for o in landing_outcomes.index if not str(o).startswith('True'))
bad_outcomes

# %% [code] - Cell 11
# landing_class = 0 if bad_outcome
# landing_class = 1 otherwise
landing_class = df['Outcome'].apply(lambda x: 0 if x in bad_outcomes else 1)

# %% [code] - Cell 12
df['Class']=landing_class
df[['Class']].head(8)

# %% [code] - Cell 13
df.head(5)

# %% [code] - Cell 14
# Compute mission outcome per orbit type
mission_outcome_by_orbit = df.groupby(['Orbit','Outcome']).size().unstack(fill_value=0)

# Compute success rate
success_rate = df["Class"].mean()

# Write Markdown summary
output_md = os.path.join('module.01', 'spacex_data_wrangling_summary.md')
os.makedirs(os.path.dirname(output_md), exist_ok=True)

with open(output_md, 'w', encoding='utf-8') as f:
    f.write('# SpaceX Data Wrangling Summary\n\n')
    f.write('Generated by labs-jupyter-spacex-Data wrangling.py\n\n')
    f.write(f'Dataset source: {dataset_source}\n\n')

    # Q1: Number of launches on each site
    f.write('## Launches per Site (Q1)\n')
    f.write('`````\n')
    f.write(launches_per_site.to_string())
    f.write('\n`````\n\n')

    # Q2: Number and occurrence of each orbit
    f.write('## Orbits Counts (Q2)\n')
    f.write('`````\n')
    f.write(orbits_counts.to_string())
    f.write('\n`````\n\n')

    # Q3: Number and occurrence of mission outcome per orbit type
    f.write('## Mission Outcome per Orbit (Q3)\n')
    f.write('`````\n')
    f.write(mission_outcome_by_orbit.to_string())
    f.write('\n`````\n\n')

    # Q4: Landing outcome label from outcome column
    f.write('## Landing Outcome Label (Q4)\n')
    f.write('Created column `Class` where 1 = successful landing (Outcome starts with "True"), 0 otherwise.\n\n')
    f.write('Class value counts:\n')
    f.write('`````\n')
    f.write(df['Class'].value_counts().to_string())
    f.write('\n`````\n')
    f.write(f"Success rate (mean of Class): {success_rate:.4f}\n")

print(f"Saved Markdown summary to: {output_md}")
